#!/usr/bin/env python3
"""
Infrastructure Project Management Optimization

This script implements the optimization model for managing parallel infrastructure projects
with supplier selection as described in Model 1.docx.

Author: Generated by Claude AI
"""

from model1 import create_and_solve_model
from utils import (
    plot_gantt_chart, 
    plot_resource_usage, 
    plot_project_delays, 
    plot_supplier_allocation,
    plot_critical_path
)
import time
import os
import pandas as pd
import numpy as np

def main():
    """
    Run the infrastructure project management optimization model
    and generate visualizations of the results.
    """
    print("=" * 80)
    print("INFRASTRUCTURE PROJECT MANAGEMENT OPTIMIZATION")
    print("=" * 80)
    print("\nSolving the optimization model...")
    
    start_time = time.time()
    
    # Create and solve the model
    results = create_and_solve_model()
    
    end_time = time.time()
    solve_time = end_time - start_time
    
    print(f"\nModel solved in {solve_time:.2f} seconds")
    
    if 'objective_value' in results:
        print("\nRESULTS SUMMARY:")
        print("-" * 40)
        print(f"Status: {results['status']}")
        print(f"Total Penalty Cost: {results['total_penalty']:.2f} NIS")
        
        # Create output directory for visualizations
        os.makedirs('visualizations', exist_ok=True)
        
        # Display project-specific results
        for j in range(results['raw_data']['NUM_project']):
            print(f"\nProject {j+1}:")
            print(f"  Target Date: {results['raw_data']['Target'][j]} days")
            print(f"  Actual Completion: {results['completion_times'][j]:.0f} days")
            delay = results['delays'][j]
            if delay > 0:
                print(f"  Delay: {delay:.0f} days")
                print(f"  Penalty: {results['penalties'][j]:.2f} NIS")
            else:
                print("  Completed on time")
        
        # Generate detailed reports
        generate_detailed_reports(results)
        
        print("\nGENERATING VISUALIZATIONS...")
        
        # Generate visualization charts
        plot_gantt_chart(results)
        plot_resource_usage(results)
        plot_project_delays(results)
        plot_supplier_allocation(results)
        plot_critical_path(results)
        
        print("\nAll visualizations have been generated.")
    else:
        print("\nNo feasible solution found.")
    
    print("\nDone!")

def generate_detailed_reports(results):
    """
    Generate detailed reports of the optimization results
    """
    # Create output directory
    os.makedirs('reports', exist_ok=True)
    
    # 1. Project Completion Report
    project_data = []
    for j in range(results['raw_data']['NUM_project']):
        project_data.append({
            'Project': f'Project {j+1}',
            'Target Date': results['raw_data']['Target'][j],
            'Completion Date': results['completion_times'][j],
            'Delay (days)': results['delays'][j],
            'Daily Penalty': results['raw_data']['Penalty'][j],
            'Total Penalty (NIS)': results['penalties'][j]
        })
    
    project_df = pd.DataFrame(project_data)
    project_df.to_csv('reports/project_completion.csv', index=False)
    print("\nProject completion report saved to 'reports/project_completion.csv'")
    
    # 2. Activity Schedule Report
    activity_data = []
    for i in range(results['raw_data']['NUM_act']):
        for j in range(results['raw_data']['NUM_project']):
            activity_data.append({
                'Project': f'Project {j+1}',
                'Activity': f'Activity {i+1}',
                'Start Time': results['start_times'][i][j],
                'Finish Time': results['finish_times'][i][j],
                'Duration': results['finish_times'][i][j] - results['start_times'][i][j]
            })
    
    activity_df = pd.DataFrame(activity_data)
    activity_df.to_csv('reports/activity_schedule.csv', index=False)
    print("Activity schedule report saved to 'reports/activity_schedule.csv'")
    
    # 3. Supplier Allocation Report
    supplier_data = []
    
    for k in range(results['raw_data']['NUM_raw_mat']):
        for s in range(results['raw_data']['NUM_sup']):
            for j in range(results['raw_data']['NUM_project']):
                # Sum quantities across all orders
                total_quantity = sum(results['material_allocations'][o][k][s][j] 
                                    for o in range(len(results['material_allocations'])))
                
                if total_quantity > 0:
                    supplier_data.append({
                        'Project': f'Project {j+1}',
                        'Material': f'Material {k+1}',
                        'Supplier': f'Supplier {s+1}',
                        'Allocated Quantity': total_quantity,
                        'Supplier Capacity': results['raw_data']['Capacity'][k][s],
                        'Unit Cost': results['raw_data']['Cost'][k][s][j] if results['raw_data']['Capacity'][k][s] > 0 else 0,
                        'Total Cost': total_quantity * results['raw_data']['Cost'][k][s][j] if results['raw_data']['Capacity'][k][s] > 0 else 0
                    })
    
    supplier_df = pd.DataFrame(supplier_data)
    supplier_df.to_csv('reports/supplier_allocation.csv', index=False)
    print("Supplier allocation report saved to 'reports/supplier_allocation.csv'")
    
    # 4. Resource requirements per project
    resource_data = []
    
    for j in range(results['raw_data']['NUM_project']):
        for k in range(results['raw_data']['NUM_raw_mat']):
            required = results['raw_data']['Quantity'][k][j]
            allocated = sum(sum(results['material_allocations'][o][k][s][j] 
                              for o in range(len(results['material_allocations'])))
                           for s in range(results['raw_data']['NUM_sup']))
            
            resource_data.append({
                'Project': f'Project {j+1}',
                'Material': f'Material {k+1}',
                'Required Quantity': required,
                'Allocated Quantity': allocated,
                'Difference': allocated - required
            })
    
    resource_df = pd.DataFrame(resource_data)
    resource_df.to_csv('reports/resource_requirements.csv', index=False)
    print("Resource requirements report saved to 'reports/resource_requirements.csv'")

if __name__ == "__main__":
    main()
